/*
 * Copyright 2012 Sadig <http://www.sadig.com>. All rights reserved.
 */
package br.unisinos.lb2.cloudbox;

import br.unisinos.lb2.cloudbox.model.ListaModel;
import br.unisinos.lb2.cloudbox.model.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Leandro Tonietto <leandro@sadig.com>
 */
public class CloudBoxFrame extends javax.swing.JFrame {
	private Usuario usuarioLogado = null; // null indica que usuário não está logado
	private SC servidor;
        private ListaModel lista;
        
        
	/**
	 * Creates new form CloudBoxFrame
	 */
	public CloudBoxFrame() {
		initComponents();
		Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
		setLocation(d.width/2 - getWidth()/2, d.height/2 - getHeight()/2);
		servidor = new SC(); // main inicia SC...
		habilitaOpcoes(true, true, false, false, false, false);
                
                lista = new ListaModel(null);
		tbListOfFiles.setModel(lista);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btLogin = new javax.swing.JButton();
        btAccount = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btUpload = new javax.swing.JButton();
        btDownload = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btDelete = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        btLogout = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        lbPath = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taContent = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbListOfFiles = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/login.png"))); // NOI18N
        btLogin.setText("Login");
        btLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoginActionPerformed(evt);
            }
        });
        jPanel1.add(btLogin);

        btAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/account.png"))); // NOI18N
        btAccount.setText("Cadastrar");
        btAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAccountActionPerformed(evt);
            }
        });
        jPanel1.add(btAccount);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(2, 50));
        jPanel1.add(jSeparator2);

        btUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/upload.png"))); // NOI18N
        btUpload.setText("Enviar arquivo");
        btUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUploadActionPerformed(evt);
            }
        });
        jPanel1.add(btUpload);

        btDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/download.png"))); // NOI18N
        btDownload.setText("Receber arquivo");
        btDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDownloadActionPerformed(evt);
            }
        });
        jPanel1.add(btDownload);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 50));
        jPanel1.add(jSeparator1);

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/delete.png"))); // NOI18N
        btDelete.setText("Excluir arquivo do servidor");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btDelete);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(2, 50));
        jPanel1.add(jSeparator3);

        btLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/logout.png"))); // NOI18N
        btLogout.setText("Logout");
        btLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLogoutActionPerformed(evt);
            }
        });
        jPanel1.add(btLogout);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        lbPath.setText("Local: ");
        lbPath.setMaximumSize(new java.awt.Dimension(31, 20));
        lbPath.setMinimumSize(new java.awt.Dimension(31, 20));
        lbPath.setPreferredSize(new java.awt.Dimension(31, 20));
        jPanel2.add(lbPath, java.awt.BorderLayout.PAGE_START);

        taContent.setColumns(20);
        taContent.setRows(5);
        jScrollPane1.setViewportView(taContent);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Conteúdo do Arquivo", new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/document-icon24.png")), jPanel2); // NOI18N

        jPanel3.setLayout(new java.awt.BorderLayout());

        tbListOfFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tbListOfFiles);

        jPanel3.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Arquivos", new javax.swing.ImageIcon(getClass().getResource("/br/unisinos/lb2/cloudbox/folder-documents-icon24.png")), jPanel3); // NOI18N

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void btLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoginActionPerformed
      login();
   }//GEN-LAST:event_btLoginActionPerformed

   private void btLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLogoutActionPerformed
     logout();
   }//GEN-LAST:event_btLogoutActionPerformed

   private void btAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAccountActionPerformed
      cadastro();
   }//GEN-LAST:event_btAccountActionPerformed

   private void btUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUploadActionPerformed
      enviarArquivo();
   }//GEN-LAST:event_btUploadActionPerformed

   private void btDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDownloadActionPerformed
      receberArquivo();
   }//GEN-LAST:event_btDownloadActionPerformed

   private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
      excluir();
   }//GEN-LAST:event_btDeleteActionPerformed

   private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
      encerraAplicacao();
   }//GEN-LAST:event_formWindowClosed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CloudBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CloudBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CloudBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CloudBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CloudBoxFrame().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAccount;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btDownload;
    private javax.swing.JButton btLogin;
    private javax.swing.JButton btLogout;
    private javax.swing.JButton btUpload;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbPath;
    private javax.swing.JTextArea taContent;
    private javax.swing.JTable tbListOfFiles;
    // End of variables declaration//GEN-END:variables

	// Não alterar! Método que mantém lógica funcionalidade dos botões de acordo com a situação da aplicação
	private void habilitaOpcoes(boolean login, boolean cadastro, boolean enviar, boolean receber, boolean excluir, boolean logout) {
		btLogin.setEnabled(login);
		btAccount.setEnabled(cadastro);
		btUpload.setEnabled(enviar);
		btDownload.setEnabled(receber);
		btDelete.setEnabled(excluir);
		btLogout.setEnabled(logout);
	}
	
	private void login() {
		LoginDialog ld = new LoginDialog(this);
		ld.setVisible(true);
		if(ld.ok()){
			String login = ld.getLogin();
			String pass = ld.getPassword();
                        try {
                            usuarioLogado = servidor.executarLogin(login, pass);
                            try {
                                lista.setListaArquivos(servidor.listaArquivos(usuarioLogado));
                            } catch (SemArquivosGravadosException ex) {
                                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                                lista.setListaArquivos( new Metadados[0] );
                                taContent.setText("");
                            }
                            
                            if (usuarioLogado != null) {
                                habilitaOpcoes(false, false, true, true, true, true);
                            }
                            
                       
                        } catch ( LoginIvalidoException e) {			
                                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }			
		}
	}

	// Logout apenas termina "seção" usuário
	private void logout() {
                lista.setListaArquivos( new Metadados[0] );
                taContent.setText("");
		usuarioLogado = null;
		habilitaOpcoes(true, true, false, false, false, false);
	}

	private void cadastro() {
            CadastroUsuario cadU = new CadastroUsuario(this);
            cadU.setVisible(true);
            if(cadU.ok()){
                try{
                    
                String nome  = cadU.getNome();
                String login = cadU.getUsuario();
                String senha = cadU.getPassword();
                String local = cadU.getLocal();
                
                // fazer operações de leitura de dados para cadastro do usuário
		usuarioLogado = servidor.criarContaUsuario(nome, login, senha, local);
                
		// tratar erros
                if(usuarioLogado != null)
                    habilitaOpcoes(false, false, true, true, true, true);
                
                }catch (LoginJaCadastradoException ex) {
                   JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }      
                
            }
		
	}

	private void enviarArquivo() {
            
		// fazer operações para envio do arquivo:
		// abrir arquivo e enviar objeto Arquivo para o servidor proceder com a gravação dos dados
		// tratar erros
                String arqNome;
                arqNome = JOptionPane.showInputDialog(null, "Por favor informe o nome do arquivo:", "Nome Arquivo", JOptionPane.QUESTION_MESSAGE);
                
                if(arqNome == null){
                    return;
                }
                
                if(!arqNome.equals("")){
                    
                        FileInputStream   fis;
                        BufferedInputStream ois = null;
                        byte[] b;
                        Metadados meta;
                        
                        try {
                        
                            JFileChooser jf = new JFileChooser();
                            
                            if (jf.showOpenDialog(null) != JFileChooser.APPROVE_OPTION) {
                                return;
                            }

                            fis = new FileInputStream(jf.getSelectedFile().getPath());
                            ois = new BufferedInputStream(fis);
                            b = new byte[ois.available()];
                            ois.read(b, 0, ois.available());
                            Date data = new Date();
                            meta = new Metadados(0, arqNome, usuarioLogado, b.length , data, data, null);
                            Arquivo arquivo = new Arquivo(meta, b);
                            servidor.uploadArquivo(arquivo, usuarioLogado);
                            
                            // LT - TODO
                            lista.setListaArquivos(servidor.listaArquivos(usuarioLogado));
                         
                         } catch (SemArquivosGravadosException | FileNotFoundException ex) {
                                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                         } catch (IOException ex) {
                                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                         }finally{
                            
                             if (ois != null) {
                                 try {
                                     ois.close();
                                 } catch (IOException ex) {
                                     JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                                 }
                             }
                         }
                        
                }else if(arqNome.equals("")){
                    JOptionPane.showMessageDialog(null, "Por favor, escreva um nome.");
                    enviarArquivo();
                }
	}

	private void receberArquivo() {
            
		// fazer operações para recebimento do arquivo:
		// abrir arquivo e enviar objeto Arquivo para o servidor proceder com a gravação dos dados
		// tratar erros
                String arqNome;
                arqNome = JOptionPane.showInputDialog(null, "Por favor informe o nome do arquivo:", "Nome Arquivo", JOptionPane.QUESTION_MESSAGE);
               
                if(arqNome == null){
                    return;
                }
                
                if(!arqNome.equals("")){
                
                    try {
                        
                        Arquivo arquivo;  
                        arquivo = servidor.downloadArquivo(arqNome, usuarioLogado);
                        taContent.setText(new String(arquivo.getBytes()));
                        
                    } catch (ArquivoInexistenteException ex) {                
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        taContent.setText("");
                    } 
                    
                }else if(arqNome.equals("")){
                    JOptionPane.showMessageDialog(null, "Por favor, escreva um nome.");
                    receberArquivo();
                }
	}

	private void excluir() {
		// fazer operações para solicitar exclusão do arquivo do servidor
		// tratar erros
		String arqNome;
                arqNome = JOptionPane.showInputDialog(null, "Por favor informe o nome do arquivo:", "Nome Arquivo", JOptionPane.QUESTION_MESSAGE);
                if(arqNome == null){
                    return;
                }
                if(!arqNome.equals("")){
                        try {
                            
                            servidor.excluirArquivo(arqNome, usuarioLogado);
                            
                            // LT - TODO
                            lista.setListaArquivos(servidor.listaArquivos(usuarioLogado));
                            
                        }catch (SemArquivosGravadosException ex) {
                            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
                            lista.setListaArquivos( new Metadados[0] );
                            taContent.setText("");
                        }catch (FileNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        } catch (ArquivoInexistenteException ex) {
                            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }finally{
                            
                        }
                    
                
                }else if(arqNome.equals("")){
                    JOptionPane.showMessageDialog(null, "Por favor, escreva um nome.");
                    excluir();
                }
		
	}

	private void encerraAplicacao() {
            try {
                // este método é invocado automaticamente quando a janela da aplicação é fechada
                // fazer tratamento adequado de erros.
                servidor.encerrar(); // não remover para poder recuperar informações das listas
                System.out.println("Aplicação encerrada!");
                System.exit(0); 
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }	
        }

}
